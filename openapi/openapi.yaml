openapi: 3.1.0
info:
  title: OpenRating API
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness probe
      responses:
        '200':
          description: OK
  /v1/organizations:
    post:
      tags: [Organizations]
      summary: Create an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    get:
      tags: [Organizations]
      summary: List organizations
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: q
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'

  /v1/organizations/{organization_id}:
    patch:
      tags: [Organizations]
      summary: Update an organization
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdate'
      responses:
        '200':
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found
        '409':
          description: Slug already in use

  /v1/players:
    post:
      tags: [Players]
      summary: Create a player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpsert'
      responses:
        '200':
          description: Player created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
    get:
      tags: [Players]
      summary: List players for an organization
      parameters:
        - in: query
          name: organization_id
          schema: { type: string }
          required: false
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: q
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerListResponse'
  /v1/players/{player_id}:
    patch:
      tags: [Players]
      summary: Update a player
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpdate'
      responses:
        '200':
          description: Updated player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '404':
          description: Player not found

  /v1/organizations/{organization_id}/players/{player_id}/rating-events:
    get:
      tags: [Ratings]
      summary: List rating events for a player
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: 'Sport ladder to inspect (defaults to BADMINTON)'
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: 'Discipline within the sport (defaults to SINGLES)'
        - in: query
          name: format
          required: false
          schema: { type: string }
          description: >-
            Match format identifying the ladder. OpenRating uses the standard
            draw codes common across racket sports (MS, WS, BS, GS, MD, WD, BD,
            GD, XD).
        - in: query
          name: tier
          required: false
          schema: { type: string }
          description: 'Competition tier for the ladder (defaults to UNSPECIFIED)'
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: 'Region within the organization (defaults to GLOBAL)'
        - in: query
          name: since
          required: false
          schema: { type: string, format: date-time }
          description: 'Return events created at or after this timestamp'
        - in: query
          name: until
          required: false
          schema: { type: string, format: date-time }
          description: 'Return events created before this timestamp'
        - in: query
          name: match_id
          required: false
          schema: { type: string }
          description: 'Filter events generated by a specific match'
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of rating events for the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEventListResponse'
        '404':
          description: Player not found

  /v1/organizations/{organization_id}/players/{player_id}/rating-events/{rating_event_id}:
    get:
      tags: [Ratings]
      summary: Fetch a single rating event
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: path
          name: rating_event_id
          required: true
          schema: { type: string }
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: 'Sport ladder to inspect (defaults to BADMINTON)'
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: 'Discipline within the sport (defaults to SINGLES)'
        - in: query
          name: format
          required: false
          schema: { type: string }
          description: >-
            Match format identifying the ladder. OpenRating uses the standard
            draw codes common across racket sports (MS, WS, BS, GS, MD, WD, BD,
            GD, XD).
        - in: query
          name: tier
          required: false
          schema: { type: string }
          description: 'Competition tier for the ladder (defaults to UNSPECIFIED)'
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: 'Region within the organization (defaults to GLOBAL)'
      responses:
        '200':
          description: Rating event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEvent'
        '404':
          description: Rating event not found

  /v1/organizations/{organization_id}/players/{player_id}/rating-snapshot:
    get:
      tags: [Ratings]
      summary: Retrieve a player rating snapshot at a point in time
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: 'Sport ladder to inspect (defaults to BADMINTON)'
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: 'Discipline within the sport (defaults to SINGLES)'
        - in: query
          name: format
          required: false
          schema: { type: string }
          description: >-
            Match format identifying the ladder. OpenRating uses the standard
            draw codes common across racket sports (MS, WS, BS, GS, MD, WD, BD,
            GD, XD).
        - in: query
          name: tier
          required: false
          schema: { type: string }
          description: 'Competition tier for the ladder (defaults to UNSPECIFIED)'
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: 'Region within the organization (defaults to GLOBAL)'
        - in: query
          name: as_of
          required: false
          schema: { type: string, format: date-time }
          description: 'Timestamp to evaluate rating, defaults to the latest event'
      responses:
        '200':
          description: Rating snapshot at or before the requested time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSnapshotResponse'
        '404':
          description: Player not found

  /v1/matches:
    post:
      tags: [Matches]
      summary: Submit a match result and update ratings
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchSubmit'
      responses:
        '200':
          description: Match processed with rating deltas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSubmitResponse'
    get:
      tags: [Matches]
      summary: List matches for an organization
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: sport
          required: false
          schema: { type: string }
        - in: query
          name: player_id
          required: false
          schema: { type: string }
        - in: query
          name: event_id
          required: false
          schema: { type: string }
          description: Filter matches belonging to a specific event
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: start_after
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: start_before
          required: false
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Paginated list of matches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchListResponse'

  /v1/matches/{match_id}:
    patch:
      tags: [Matches]
      summary: Update match metadata
      parameters:
        - in: path
          name: match_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchUpdate'
      responses:
        '200':
          description: Updated match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSummary'
        '404':
          description: Match not found
  /v1/organizations/{organization_slug}/leaderboard:
    get:
      tags: [Leaderboards]
      summary: Fetch the current ladder leaderboard for an organization
      description: >-
        Returns the top players for the specified organization ladder, including their
        current rating, latest delta, and ranking order. Requires authentication with
        grants that include `ratings:read`, `matches:read`, or `matches:write`.
      parameters:
        - in: path
          name: organization_slug
          required: true
          schema: { type: string }
          description: Slug identifier for the organization
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: Sport ladder to inspect (defaults to BADMINTON)
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: Discipline within the sport (defaults to SINGLES)
        - in: query
          name: format
          required: false
          schema: { type: string }
          description: Match format identifying the ladder (defaults to MS)
        - in: query
          name: tier
          required: false
          schema: { type: string }
          description: Optional competition tier filter for the ladder; omit to include all tiers
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: Optional region filter within the organization; omit to include all regions
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Leaderboard snapshot for the requested ladder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
        '404':
          description: Organization not found

  /v1/organizations/{organization_slug}/leaderboard/movers:
    get:
      tags: [Leaderboards]
      summary: List leaderboard movers since a point in time
      description: >-
        Returns the players with the largest rating change since the supplied timestamp for
        the specified organization ladder. Requires authentication with grants that include
        `ratings:read`, `matches:read`, or `matches:write`.
      parameters:
        - in: path
          name: organization_slug
          required: true
          schema: { type: string }
          description: Slug identifier for the organization
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: Sport ladder to inspect (defaults to BADMINTON)
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: Discipline within the sport (defaults to SINGLES)
        - in: query
          name: format
          required: false
          schema: { type: string }
          description: Match format identifying the ladder (defaults to MS)
        - in: query
          name: tier
          required: false
          schema: { type: string }
          description: Optional competition tier filter for the ladder; omit to include all tiers
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: Optional region filter within the organization; omit to include all regions
        - in: query
          name: since
          required: true
          schema: { type: string, format: date-time }
          description: Only include rating changes applied at or after this timestamp
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Movers list for the requested ladder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardMoversResponse'
        '404':
          description: Organization not found
  /v1/events:
    post:
      tags: [Events]
      summary: Create an event
      description: Create a tournament, league, or other competition container for matches.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Invalid request
    get:
      tags: [Events]
      summary: List events for an organization
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: UUID of the organization (optional if organization_slug provided)
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: Slug identifier for the organization
        - in: query
          name: types
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        - in: query
          name: q
          required: false
          schema: { type: string }
          description: Case-insensitive search over event name or slug
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Paginated list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
  /v1/events/{event_id}:
    get:
      tags: [Events]
      summary: Retrieve an event by ID
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    patch:
      tags: [Events]
      summary: Update an event
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200':
          description: Updated event
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
  /v1/events/{event_id}/participants:
    post:
      tags: [Events]
      summary: Upsert an event participant
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventParticipantRequest'
      responses:
        '201':
          description: Participant ensured
          content:
            application/json:
              schema:
                type: object
                properties:
                  participant:
                    $ref: '#/components/schemas/EventParticipant'
        '404':
          description: Event not found
    get:
      tags: [Events]
      summary: List participants for an event
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Event participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParticipantListResponse'
        '404':
          description: Event not found

components:
  schemas:
    PlayerUpsert:
      allOf:
        - type: object
          required: [display_name]
          properties:
            organization_id: { type: string, description: 'UUID of the organization' }
            organization_slug: { type: string, description: 'Slug identifier (alternative to organization_id)' }
            display_name: { type: string }
            short_name: { type: string }
            native_name: { type: string }
            external_ref: { type: string }
            given_name: { type: string }
            family_name: { type: string }
            sex: { type: string, enum: [M, F, X] }
            birth_year: { type: integer }
            country_code: { type: string }
            region_id: { type: string }
            competitive_profile:
              $ref: '#/components/schemas/PlayerCompetitiveProfile'
            attributes:
              $ref: '#/components/schemas/PlayerAttributes'
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerUpdate:
      allOf:
        - type: object
          properties:
            organization_id: { type: string }
            organization_slug: { type: string }
            display_name: { type: string }
            short_name:
              type: [string, 'null']
            native_name:
              type: [string, 'null']
            external_ref:
              type: [string, 'null']
            given_name:
              type: [string, 'null']
            family_name:
              type: [string, 'null']
            sex:
              type: [string, 'null']
              enum: [M, F, X, null]
            birth_year:
              type: [integer, 'null']
            country_code:
              type: [string, 'null']
            region_id:
              type: [string, 'null']
            competitive_profile:
              $ref: '#/components/schemas/PlayerCompetitiveProfile'
            attributes:
              $ref: '#/components/schemas/PlayerAttributes'
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerResponse:
      type: object
      properties:
        player_id: { type: string }
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        native_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        sex:
          type: [string, 'null']
          enum: [M, F, X, null]
        birth_year:
          type: [integer, 'null']
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        external_ref:
          type: [string, 'null']
        competitive_profile:
          $ref: '#/components/schemas/PlayerCompetitiveProfile'
        attributes:
          $ref: '#/components/schemas/PlayerAttributes'
    PlayerListResponse:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerResponse'
        next_cursor:
          type: [string, 'null']
    PlayerCompetitiveProfile:
      type: [object, 'null']
      description: Summary of competitive history used to seed or calibrate ratings.
      properties:
        discipline:
          $ref: '#/components/schemas/MatchSubmit/properties/discipline'
        ranking_points:
          type: [number, 'null']
        ranking_position:
          type: [integer, 'null']
          minimum: 1
        total_matches:
          type: [integer, 'null']
          minimum: 0
        as_of:
          type: [string, 'null']
          format: date-time
        external_rankings:
          type: [array, 'null']
          items:
            $ref: '#/components/schemas/PlayerRankingSnapshot'
    PlayerRankingSnapshot:
      type: object
      required: [source]
      properties:
        source: { type: string }
        discipline:
          type: [string, 'null']
        position:
          type: [integer, 'null']
          minimum: 1
        points:
          type: [number, 'null']
        as_of:
          type: [string, 'null']
          format: date-time
        metadata:
          type: [object, 'null']
          additionalProperties: true
    PlayerAttributes:
      type: [object, 'null']
      description: Biographical and biometric details that influence competition context.
      properties:
        handedness:
          $ref: '#/components/schemas/PlayerHandedness'
          description: Dominant playing hand (e.g. RIGHT, LEFT, AMBIDEXTROUS).
        dominant_side:
          $ref: '#/components/schemas/PlayerDominantSide'
          description: Preferred side or court position for team formats.
        height_cm:
          type: [number, 'null']
        weight_kg:
          type: [number, 'null']
        birth_date:
          type: [string, 'null']
          format: date
        residence:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    MatchSubmit:
      type: object
      required: [provider_id, sport, discipline, format, start_time, sides, games]
      properties:
        provider_id: { type: string, description: 'Identifier of the data provider submitting the match' }
        external_ref:
          type: [string, 'null']
          description: >-
            Provider-specific unique identifier for this match. Used for idempotency -
            submitting the same provider_id + external_ref combination multiple times
            will return the existing match instead of creating duplicates.
        organization_id: { type: string, description: 'UUID of the organization' }
        organization_slug: { type: string, description: 'Slug identifier (alternative to organization_id)' }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline: { type: string, enum: [SINGLES, DOUBLES, MIXED] }
        format:
          type: string
          example: MS
          description: >-
            Match format code (MS, WS, BS, GS for singles; MD, WD, BD, GD for doubles; XD for mixed).
            Note: Ratings are calculated per sport+discipline, not per format.
        event_id:
          type: string
          format: uuid
          description: Optional event identifier that groups the match with a tournament or competition
        start_time: { type: string, format: date-time }
        timing:
          $ref: '#/components/schemas/MatchTiming'
        venue_region_id: { type: string }
        tier: { type: string, enum: [SANCTIONED, LEAGUE, SOCIAL, EXHIBITION] }
        statistics:
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
        sides:
          type: object
          properties:
            A:
              type: object
              properties:
                players:
                  type: array
                  minItems: 1
                  maxItems: 2
                  items: { type: string }
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/MatchParticipant'
            B:
              type: object
              properties:
                players:
                  type: array
                  minItems: 1
                  maxItems: 2
                  items: { type: string }
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/MatchParticipant'
        games:
          type: array
          items:
            type: object
            properties:
              game_no: { type: integer }
              a: { type: integer }
              b: { type: integer }
              segments:
                type: array
                items:
                  $ref: '#/components/schemas/MatchSegment'
              statistics:
                $ref: '#/components/schemas/MatchStatistics'
    MatchUpdate:
      type: object
      properties:
        organization_id: { type: string }
        organization_slug: { type: string }
        start_time: { type: string, format: date-time }
        venue_id:
          type: [string, 'null']
        venue_region_id:
          type: [string, 'null']
        event_id:
          type: [string, 'null']
          format: uuid
        timing:
          $ref: '#/components/schemas/MatchTiming'
        statistics:
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
    MatchSubmitResponse:
      type: object
      properties:
        match_id: { type: string }
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        event_id:
          type: [string, 'null']
        ratings:
          type: array
          items:
            type: object
            properties:
              player_id: { type: string }
              rating_event_id: { type: string }
              mu_before: { type: number }
              mu_after: { type: number }
              delta: { type: number }
              sigma_after: { type: number }
              win_probability_pre: { type: number }
    MatchListResponse:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchSummary'
        next_cursor:
          type: [string, 'null']
    OrganizationCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        slug:
          type: [string, 'null']
        description:
          type: [string, 'null']
    OrganizationUpdate:
      type: object
      properties:
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
    OrganizationResponse:
      type: object
      properties:
        organization_id: { type: string }
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        created_at:
          type: [string, 'null']
          format: date-time
    OrganizationListResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'
        next_cursor:
          type: [string, 'null']
    MatchSummary:
      type: object
      properties:
        match_id: { type: string }
        provider_id: { type: string }
        external_ref:
          type: [string, 'null']
          description: Provider-specific unique identifier for this match
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        sport: { $ref: '#/components/schemas/MatchSubmit/properties/sport' }
        discipline: { $ref: '#/components/schemas/MatchSubmit/properties/discipline' }
        format: { type: string }
        tier:
          type: [string, 'null']
        start_time: { type: string, format: date-time }
        venue_id:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        event_id:
          type: [string, 'null']
        timing:
          $ref: '#/components/schemas/MatchTiming'
        statistics:
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
        sides:
          type: object
          additionalProperties:
            type: object
            properties:
              players:
                type: array
                items: { type: string }
              participants:
                type: array
                items:
                  $ref: '#/components/schemas/MatchParticipant'
        games:
          type: array
          items:
            type: object
            properties:
              game_no: { type: integer }
              a: { type: integer }
              b: { type: integer }
              segments:
                type: array
                items:
                  $ref: '#/components/schemas/MatchSegment'
              statistics:
                $ref: '#/components/schemas/MatchStatistics'
    MatchTiming:
      type: object
      description: Key timestamps and duration information for a match.
      properties:
        scheduled_start:
          type: [string, 'null']
          format: date-time
        actual_start:
          type: [string, 'null']
          format: date-time
        completed_at:
          type: [string, 'null']
          format: date-time
        duration_seconds:
          type: [integer, 'null']
          minimum: 0
        time_zone:
          type: [string, 'null']
          pattern: '^[A-Za-z]+(?:/[A-Za-z_]+)+$'
          description: IANA time zone identifier capturing the competition locale.
        status:
          $ref: '#/components/schemas/MatchStatus'
    MatchSegment:
      type: object
      description: Time-ordered scoring or momentum events captured during play.
      properties:
        sequence:
          type: [integer, 'null']
          minimum: 1
          description: Position of the segment within the match or game.
        phase:
          type: [string, 'null']
          description: Optional phase identifier such as GAME_1, TIEBREAK, or OVERTIME.
        label:
          type: [string, 'null']
        side:
          $ref: '#/components/schemas/MatchSegmentSide'
          description: Identifier of the side credited for the event.
        value:
          type: [number, 'null']
          description: Numeric magnitude for the segment (such as points won).
        unit:
          type: [string, 'null']
        elapsed_seconds:
          type: [number, 'null']
        timestamp:
          type: [string, 'null']
          format: date-time
        metadata:
          type: [object, 'null']
          additionalProperties: true
    MatchParticipant:
      type: object
      required: [player_id]
      properties:
        player_id: { type: string }
        role:
          $ref: '#/components/schemas/MatchParticipantRole'
          description: Competition-specific role or lineup position.
        seed:
          type: [integer, 'null']
          minimum: 1
        status:
          $ref: '#/components/schemas/MatchParticipantStatus'
          description: Participation status such as ACTIVE or WITHDRAWN.
        external_ref:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    MatchStatistics:
      type: object
      description: Collection of key-value metrics summarizing performance.
      additionalProperties:
        $ref: '#/components/schemas/MatchMetric'
    MatchMetric:
      type: object
      required: [value]
      properties:
        value:
          type: number
        unit:
          type: [string, 'null']
        breakdown:
          type: [object, 'null']
          additionalProperties:
            type: number
        source:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
      description: A single statistic value with optional contextual details.
    Event:
      type: object
      properties:
        event_id: { type: string }
        organization_id: { type: string }
        organization_slug: { type: string }
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
          description: ISO-4217 code representing the purse currency.
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
        created_at:
          type: [string, 'null']
          format: date-time
        updated_at:
          type: [string, 'null']
          format: date-time
    EventCreate:
      type: object
      required: [type, name]
      properties:
        organization_id: { type: string, format: uuid }
        organization_slug: { type: string }
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
    EventUpdate:
      type: object
      properties:
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
    EventClassification:
      type: object
      description: Structured hierarchy data describing the competitive level of an event.
      properties:
        level:
          $ref: '#/components/schemas/EventLevel'
          description: High-level tour or competition grade (e.g. WORLD_TOUR, NATIONAL, CLUB).
        grade:
          $ref: '#/components/schemas/EventGrade'
          description: Fine-grained grade within the level (e.g. SUPER_750, MAJOR, DIVISION_1).
        age_group:
          $ref: '#/components/schemas/EventAgeGroup'
          description: Target age bracket if applicable (e.g. U19, SENIOR).
        tour:
          type: [string, 'null']
          description: Named series or tour identifier.
        category:
          type: [string, 'null']
          description: Discipline-specific category, draw, or bracket label.
    EventMediaLinks:
      type: object
      description: Links to event resources across digital channels.
      properties:
        website:
          type: [string, 'null']
          format: uri
        registration:
          type: [string, 'null']
          format: uri
        live_scoring:
          type: [string, 'null']
          format: uri
        streaming:
          type: [string, 'null']
          format: uri
        social:
          type: [object, 'null']
          additionalProperties: { type: string, format: uri }
    EventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        next_cursor:
          type: [string, 'null']
    EventParticipant:
      type: object
      properties:
        event_id: { type: string }
        player_id: { type: string }
        seed:
          type: [integer, 'null']
        status:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
        created_at:
          type: [string, 'null']
          format: date-time
        updated_at:
          type: [string, 'null']
          format: date-time
    EventParticipantRequest:
      type: object
      required: [player_id]
      properties:
        player_id: { type: string }
        seed:
          type: [integer, 'null']
        status:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    EventParticipantListResponse:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/EventParticipant'
    MatchStatus:
      type: string
      description: Lifecycle status for a match.
      enum: [SCHEDULED, IN_PROGRESS, COMPLETED, RETIRED, WALKOVER, CANCELLED]
    MatchSegmentSide:
      type: string
      description: Identifier for the match side credited in a segment.
      enum: [A, B, HOME, AWAY]
    MatchParticipantRole:
      type: string
      description: Role designation for a participant.
      enum: [STARTER, SUBSTITUTE, RESERVE, LEAD, OTHER]
    MatchParticipantStatus:
      type: string
      description: Roster status indicator for a participant.
      enum: [ACTIVE, STARTER, BENCH, WITHDRAWN, INACTIVE, OTHER]
    PlayerHandedness:
      type: string
      description: Dominant playing hand.
      enum: [LEFT, RIGHT, AMBIDEXTROUS, OTHER]
    PlayerDominantSide:
      type: string
      description: Preferred side or court position.
      enum: [DEUCE, AD, LEFT, RIGHT, BOTH, OTHER]
    EventLevel:
      type: [string, 'null']
      description: Top-level classification tier for an event.
      enum: [WORLD_TOUR, CONTINENTAL, NATIONAL, REGIONAL, CLUB, SCHOOL, COMMUNITY, OTHER, null]
    EventGrade:
      type: [string, 'null']
      description: Grade within a level, often tied to ranking points.
      enum: [SUPER_1000, SUPER_750, SUPER_500, SUPER_300, GOLD, SILVER, BRONZE, MAJOR, DIVISION_1, DIVISION_2, OPEN, OTHER, null]
    EventAgeGroup:
      type: [string, 'null']
      description: Target age bracket for participants.
      enum: [U11, U13, U15, U17, U19, U21, SENIOR, ADULT, VETERAN, MASTER, OPEN, OTHER, null]
    RatingEvent:
      type: object
      properties:
        rating_event_id: { type: string }
        organization_id: { type: string }
        player_id: { type: string }
        match_id:
          type: [string, 'null']
        applied_at: { type: string, format: date-time }
        rating_system:
          type: [string, 'null']
        mu_before: { type: number }
        mu_after: { type: number }
        delta: { type: number }
        sigma_before:
          type: [number, 'null']
        sigma_after: { type: number }
        win_probability_pre:
          type: [number, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    RatingEventListResponse:
      type: object
      properties:
        rating_events:
          type: array
          items:
            $ref: '#/components/schemas/RatingEvent'
        next_cursor:
          type: [string, 'null']
    RatingSnapshotResponse:
      type: object
      required: [organization_id, player_id, as_of, mu, sigma]
      properties:
        organization_id: { type: string }
        player_id: { type: string }
        as_of: { type: string, format: date-time }
        mu: { type: number }
        sigma: { type: number }
        rating_event:
          anyOf:
            - $ref: '#/components/schemas/RatingEvent'
            - type: 'null'
          description: 'Latest rating event applied at or before the snapshot time'
    LeaderboardPlayer:
      type: object
      properties:
        rank: { type: integer }
        player_id: { type: string }
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        mu: { type: number }
        sigma: { type: number }
        matches: { type: integer }
        delta:
          type: [number, 'null']
        last_event_at:
          type: [string, 'null']
          format: date-time
        last_match_id:
          type: [string, 'null']
    LeaderboardResponse:
      type: object
      properties:
        organization_id: { type: string }
        organization_slug: { type: string }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        tier:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        players:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardPlayer'
    LeaderboardMover:
      type: object
      properties:
        player_id: { type: string }
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        mu: { type: number }
        sigma: { type: number }
        matches: { type: integer }
        change: { type: number }
        events: { type: integer }
        last_event_at:
          type: [string, 'null']
          format: date-time
    LeaderboardMoversResponse:
      type: object
      properties:
        organization_id: { type: string }
        organization_slug: { type: string }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        tier:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        since: { type: string, format: date-time }
        players:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardMover'
