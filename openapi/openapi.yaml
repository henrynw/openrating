openapi: 3.1.0
info:
  title: OpenRating API
  version: 1.0.0
  description: |
    ## Authentication

    Self-hosted deployments supply their own identity provider (see the README for
    configuration details). To request client credentials for the hosted OpenRating
    service, contact us at https://www.openrating.app/contact.
tags:
  - name: Leaderboards
    description: Global rating leaderboards and movers for each sport and discipline.
servers:
  - url: https://api.example.com
paths:
  /health:
    get:
      tags: [Health]
      summary: Liveness probe
      responses:
        '200':
          description: OK
  /v1/organizations:
    post:
      tags: [Organizations]
      summary: Create an organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreate'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    get:
      tags: [Organizations]
      summary: List organizations
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: q
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'

  /v1/organizations/{organization_id}:
    patch:
      tags: [Organizations]
      summary: Update an organization
      parameters:
        - in: path
          name: organization_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdate'
      responses:
        '200':
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '404':
          description: Organization not found
        '409':
          description: Slug already in use

  /v1/players:
    post:
      tags: [Players]
      summary: Create a player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpsert'
      responses:
        '200':
          description: Player created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
    get:
      tags: [Players]
      summary: List players for an organization
      parameters:
        - in: query
          name: organization_id
          schema: { type: string }
          required: false
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: q
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerListResponse'
  /v1/players/totals/by-sport:
    get:
      tags: [Players]
      summary: Total players grouped by sport
      operationId: countPlayersBySport
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: Filter totals to a specific sport
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: Filter totals to players within a specific discipline (requires sport)
      responses:
        '200':
          description: Totals grouped by sport for the requested filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerSportTotalsResponse'
  /v1/players/{player_id}:
    get:
      tags: [Players]
      summary: Retrieve a single player
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
      responses:
        '200':
          description: Player details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '404':
          description: Player not found
    patch:
      tags: [Players]
      summary: Update a player
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerUpdate'
      responses:
        '200':
          description: Updated player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '404':
          description: Player not found

  /v1/players/{player_id}/profile-photo/upload:
    post:
      tags: [Players]
      summary: Issue an upload URL for a player's profile photo
      operationId: createPlayerProfilePhotoUpload
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerProfilePhotoUploadRequest'
      responses:
        '200':
          description: Upload URL issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilePhotoUploadResponse'
        '400':
          description: Invalid request
        '404':
          description: Player not found
        '503':
          description: Profile photo service not configured

  /v1/players/{player_id}/profile-photo/finalize:
    post:
      tags: [Players]
      summary: Finalize a player's profile photo upload after uploading
      operationId: finalizePlayerProfilePhoto
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerProfilePhotoFinalizeRequest'
      responses:
        '200':
          description: Profile photo finalized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilePhotoFinalizeResponse'
        '400':
          description: Invalid request
        '404':
          description: Player not found
        '409':
          description: Uploaded image is not yet available; retry the finalize call shortly
        '503':
          description: Profile photo service not configured

  /v1/players/{player_id}/profile-photo:
    delete:
      tags: [Players]
      summary: Remove a player's profile photo
      operationId: deletePlayerProfilePhoto
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerProfilePhotoDeleteRequest'
      responses:
        '200':
          description: Profile photo removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilePhotoDeleteResponse'
        '400':
          description: Invalid request
        '404':
          description: Player not found

  /v1/players/{player_id}/insights:
    get:
      tags: [Players]
      summary: Retrieve precomputed insights for a player
      operationId: getPlayerInsights
      parameters:
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: Limit insights to a specific sport (defaults to all tracked sports)
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: Limit insights to a specific discipline when provided
        - in: query
          name: include_ai
          required: false
          schema:
            type: boolean
          description: 'When true, include the latest AI narrative state or enqueue a new generation request.'
        - in: header
          name: If-None-Match
          required: false
          schema: { type: string }
          description: 'Return 304 if the provided ETag matches the current snapshot'
      responses:
        '200':
          description: Precomputed insight snapshot for the player
          headers:
            ETag:
              schema: { type: string }
              description: Cache validator for the snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerInsightsResponse'
        '304':
          description: Snapshot not modified
        '404':
          description: Player not found

  /v1/ratings/{sport}/{discipline}/players/{player_id}/events:
    get:
      tags: [Ratings]
      summary: List rating events for a player
      operationId: listPlayerRatingEvents
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter events (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped events
        - in: query
          name: since
          required: false
          schema: { type: string, format: date-time }
          description: Return events created at or after this timestamp
        - in: query
          name: until
          required: false
          schema: { type: string, format: date-time }
          description: Return events created before this timestamp
        - in: query
          name: match_id
          required: false
          schema: { type: string }
          description: Filter events generated by a specific match
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Paginated list of rating events for the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEventListResponse'
        '404':
          description: Player not found

  /v1/ratings/{sport}/{discipline}/players/{player_id}/events/{rating_event_id}:
    get:
      tags: [Ratings]
      summary: Fetch a single rating event
      operationId: getPlayerRatingEvent
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: path
          name: rating_event_id
          required: true
          schema: { type: string }
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter events (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped events
      responses:
        '200':
          description: Rating event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEvent'
        '404':
          description: Rating event not found

  /v1/ratings/{sport}/{discipline}/players/{player_id}/snapshot:
    get:
      tags: [Ratings]
      summary: Retrieve a player rating snapshot at a point in time
      operationId: getPlayerRatingSnapshot
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter events (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped events
        - in: query
          name: as_of
          required: false
          schema: { type: string, format: date-time }
          description: Timestamp to evaluate rating, defaults to the latest event
      responses:
        '200':
          description: Rating snapshot at or before the requested time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSnapshotResponse'
        '404':
          description: Player not found

  /v1/ratings/{sport}/{discipline}/players/{player_id}:
    get:
      tags: [Ratings]
      summary: Retrieve the current rating for a player
      operationId: getCurrentPlayerRating
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: path
          name: player_id
          required: true
          schema: { type: string }
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter events (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped events
      responses:
        '200':
          description: Current rating summary for the player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSummaryResponse'
        '404':
          description: Player not found

  /v1/matches:
    post:
      tags: [Matches]
      summary: Submit a match result and update ratings
      parameters:
        - in: header
          name: Idempotency-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchSubmit'
      responses:
        '200':
          description: Match processed with rating deltas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSubmitResponse'
    get:
      tags: [Matches]
      summary: List matches for an organization
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: sport
          required: false
          schema: { type: string }
        - in: query
          name: player_id
          required: false
          schema: { type: string }
        - in: query
          name: event_id
          required: false
          schema: { type: string }
          description: Filter matches belonging to a specific event
        - in: query
          name: competition_id
          required: false
          schema: { type: string }
          description: Filter matches belonging to a specific competition
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: start_after
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: start_before
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: include
          required: false
          schema:
            type: string
            enum: [rating_events]
          description: 'Optional includes to enrich the payload. Specify rating_events to embed per-player rating deltas.'
      responses:
        '200':
          description: Paginated list of matches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchListResponse'

  /v1/matches/totals/by-sport:
    get:
      tags: [Matches]
      summary: Total matches grouped by sport
      operationId: countMatchesBySport
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: sport
          required: false
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
          description: Filter totals to a specific sport
        - in: query
          name: discipline
          required: false
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
          description: Filter totals to matches within a specific discipline (requires sport)
        - in: query
          name: player_id
          required: false
          schema: { type: string }
          description: Filter matches that include the specified player
        - in: query
          name: event_id
          required: false
          schema: { type: string }
          description: Filter matches belonging to a specific event
        - in: query
          name: competition_id
          required: false
          schema: { type: string }
          description: Filter matches belonging to a specific competition
        - in: query
          name: start_after
          required: false
          schema: { type: string, format: date-time }
          description: Include matches that begin on or after this timestamp
        - in: query
          name: start_before
          required: false
          schema: { type: string, format: date-time }
          description: Include matches that begin on or before this timestamp
      responses:
        '200':
          description: Totals grouped by sport for the requested filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSportTotalsResponse'

  /v1/matches/{match_id}:
    get:
      tags: [Matches]
      summary: Retrieve a single match
      parameters:
        - in: path
          name: match_id
          required: true
          schema: { type: string }
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: 'UUID of the organization (optional if organization_slug provided)'
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: 'Slug identifier for the organization'
        - in: query
          name: include
          required: false
          schema:
            type: string
            enum: [rating_events]
          description: 'Optional includes to enrich the payload. Specify rating_events to embed per-player rating deltas.'
      responses:
        '200':
          description: Match summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSummary'
        '404':
          description: Match not found
    patch:
      tags: [Matches]
      summary: Update match metadata
      parameters:
        - in: path
          name: match_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchUpdate'
      responses:
        '200':
          description: Updated match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchSummary'
        '404':
          description: Match not found
  /v1/ratings/{sport}/{discipline}:
    get:
      tags: [Leaderboards]
      summary: Fetch the current global leaderboard
      description: >-
        Returns the top players for the requested sport and discipline, including their current rating,
        latest delta, and ranking order. Optional query parameters allow consumers to view scoped cuts
        (for example, sanctioned-only or organization-only views).
      operationId: listGlobalLeaderboard
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter the leaderboard (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped ladders
        - in: query
          name: sex
          required: false
          schema:
            type: string
            enum: [M, F, X]
          description: Filter to players with a matching registered sex
        - in: query
          name: country_code
          required: false
          schema:
            type: string
            pattern: '^[A-Za-z]{2,3}$'
          description: Restrict the leaderboard to players with a matching country code
        - in: query
          name: region_id
          required: false
          schema: { type: string }
          description: Restrict the leaderboard to players assigned to the supplied region identifier
        - in: query
          name: age_group
          required: false
          schema: { type: string }
          description: Named age band defined for the ladder (e.g. U17, U19)
        - in: query
          name: age_from
          required: false
          schema:
            type: integer
            minimum: 0
          description: Minimum age (inclusive) as of the season cutoff. Use with `age_cutoff` to override defaults.
        - in: query
          name: age_to
          required: false
          schema:
            type: integer
            minimum: 0
          description: Maximum age (inclusive) as of the season cutoff.
        - in: query
          name: age_cutoff
          required: false
          schema:
            type: string
            format: date
          description: Cutoff date used to evaluate age filters. Defaults to the ladder's configured value (Dec 31 of the current season if unspecified).
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - in: query
          name: cursor
          required: false
          schema: { type: string }
          description: Cursor token for pagination (pass the `next_cursor` value from the previous page)
      responses:
        '200':
          description: Leaderboard snapshot for the requested ladder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'

  /v1/ratings/{sport}/{discipline}/movers:
    get:
      tags: [Leaderboards]
      summary: List leaderboard movers since a point in time
      description: >-
        Returns the players with the largest rating change since the supplied timestamp for the requested
        ladder. Optional filters let consumers inspect scoped leaderboards such as sanctioned events only.
      operationId: listGlobalLeaderboardMovers
      parameters:
        - in: path
          name: sport
          required: true
          schema:
            type: string
            enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        - in: path
          name: discipline
          required: true
          schema:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        - in: query
          name: scope
          required: false
          schema: { type: string }
          description: Optional rating scope to filter the movers view (defaults to GLOBAL)
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: Optional organization filter when viewing scoped ladders
        - in: query
          name: since
          required: true
          schema: { type: string, format: date-time }
          description: Only include rating changes applied at or after this timestamp
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Movers list for the requested ladder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardMoversResponse'
  /v1/events:
    post:
      tags: [Events]
      summary: Create an event
      description: Create a tournament, league, or other competition container for matches.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Invalid request
    get:
      tags: [Events]
      summary: List events for an organization
      parameters:
        - in: query
          name: organization_id
          required: false
          schema: { type: string }
          description: UUID of the organization (optional if organization_slug provided)
        - in: query
          name: organization_slug
          required: false
          schema: { type: string }
          description: Slug identifier for the organization
        - in: query
          name: types
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        - in: query
          name: q
          required: false
          schema: { type: string }
          description: Case-insensitive search over event name or slug
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: Paginated list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
  /v1/events/{event_id}:
    get:
      tags: [Events]
      summary: Retrieve an event by ID
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
    patch:
      tags: [Events]
      summary: Update an event
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200':
          description: Updated event
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
  /v1/events/{event_id}/competitions:
    post:
      tags: [Competitions]
      summary: Create a competition within an event
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionCreate'
      responses:
        '201':
          description: Competition created
          content:
            application/json:
              schema:
                type: object
                properties:
                  competition:
                    $ref: '#/components/schemas/Competition'
        '400':
          description: Invalid request
        '404':
          description: Event not found
    get:
      tags: [Competitions]
      summary: List competitions for an event
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Competitions for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionListResponse'
        '404':
          description: Event not found

  /v1/competitions/{competition_id}:
    get:
      tags: [Competitions]
      summary: Retrieve a competition
      parameters:
        - in: path
          name: competition_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Competition details
          content:
            application/json:
              schema:
                type: object
                properties:
                  competition:
                    $ref: '#/components/schemas/Competition'
        '404':
          description: Competition not found
    patch:
      tags: [Competitions]
      summary: Update a competition
      parameters:
        - in: path
          name: competition_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionUpdate'
      responses:
        '200':
          description: Updated competition
          content:
            application/json:
              schema:
                type: object
                properties:
                  competition:
                    $ref: '#/components/schemas/Competition'
        '400':
          description: Invalid request
        '404':
          description: Competition not found

  /v1/competitions/{competition_id}/participants:
    post:
      tags: [Competitions]
      summary: Upsert a competition participant
      parameters:
        - in: path
          name: competition_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompetitionParticipantRequest'
      responses:
        '201':
          description: Participant ensured
          content:
            application/json:
              schema:
                type: object
                properties:
                  participant:
                    $ref: '#/components/schemas/CompetitionParticipant'
        '404':
          description: Competition not found
    get:
      tags: [Competitions]
      summary: List participants for a competition
      parameters:
        - in: path
          name: competition_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Competition participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionParticipantListResponse'
        '404':
          description: Competition not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JSON Web Tokens used to authorize requests. Self-hosted installations
        configure their own issuer; hosted API credentials are issued by OpenRating
        (request access at https://www.openrating.app/contact).
  schemas:
    PlayerUpsert:
      allOf:
        - type: object
          required: [display_name]
          properties:
            organization_id: { type: string, description: 'UUID of the organization' }
            organization_slug: { type: string, description: 'Slug identifier (alternative to organization_id)' }
            display_name: { type: string }
            short_name: { type: string }
            native_name: { type: string }
            external_ref: { type: string }
            given_name: { type: string }
            family_name: { type: string }
            sex: { type: string, enum: [M, F, X] }
            birth_year: { type: integer }
            birth_date:
              type: string
              format: date
            country_code: { type: string }
            region_id: { type: string }
            competitive_profile:
              $ref: '#/components/schemas/PlayerCompetitiveProfile'
            attributes:
              $ref: '#/components/schemas/PlayerAttributes'
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerUpdate:
      allOf:
        - type: object
          properties:
            organization_id: { type: string }
            organization_slug: { type: string }
            display_name: { type: string }
            short_name:
              type: [string, 'null']
            native_name:
              type: [string, 'null']
            external_ref:
              type: [string, 'null']
            given_name:
              type: [string, 'null']
            family_name:
              type: [string, 'null']
            sex:
              type: [string, 'null']
              enum: [M, F, X, null]
            birth_year:
              type: [integer, 'null']
            birth_date:
              type: [string, 'null']
              format: date
            country_code:
              type: [string, 'null']
            region_id:
              type: [string, 'null']
            competitive_profile:
              $ref: '#/components/schemas/PlayerCompetitiveProfile'
            attributes:
              $ref: '#/components/schemas/PlayerAttributes'
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerResponse:
      type: object
      properties:
        player_id: { type: string }
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        native_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        sex:
          type: [string, 'null']
          enum: [M, F, X, null]
        birth_year:
          type: [integer, 'null']
        birth_date:
          type: [string, 'null']
          format: date
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        external_ref:
          type: [string, 'null']
        competitive_profile:
          $ref: '#/components/schemas/PlayerCompetitiveProfile'
        attributes:
          $ref: '#/components/schemas/PlayerAttributes'
        profile_photo_id:
          type: [string, 'null']
          description: Cloudflare Images identifier for the player's profile photo
        profile_photo_url:
          type: [string, 'null']
          format: uri
          description: CDN URL for the player's current profile photo
        profile_photo_uploaded_at:
          type: [string, 'null']
          format: date-time
          description: Timestamp when the current profile photo was last updated
    PlayerProfilePhotoContentType:
      type: string
      enum: [image/jpeg, image/png, image/webp, image/avif]
    PlayerProfilePhotoUploadRequest:
      allOf:
        - type: object
          properties:
            organization_id: { type: string }
            organization_slug: { type: string }
            content_type:
              $ref: '#/components/schemas/PlayerProfilePhotoContentType'
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerProfilePhotoUploadResponse:
      type: object
      properties:
        upload:
          type: object
          properties:
            url:
              type: string
              format: uri
            method:
              type: string
              enum: [POST]
            headers:
              type: object
              additionalProperties:
                type: string
            expires_at:
              type: string
              format: date-time
          required: [url, method, headers, expires_at]
        profile_photo:
          type: object
          properties:
            image_id: { type: string }
            url:
              type: [string, 'null']
              format: uri
            requires_finalize:
              type: boolean
              description: Indicates the client must call finalize after the upload completes
          required: [image_id, requires_finalize]
        previous_photo:
          type: [object, 'null']
          properties:
            image_id: { type: string }
            url:
              type: [string, 'null']
              format: uri
        player:
          $ref: '#/components/schemas/PlayerResponse'
      required: [upload, profile_photo, player]
    PlayerProfilePhotoDeleteRequest:
      allOf:
        - type: object
          properties:
            organization_id: { type: string }
            organization_slug: { type: string }
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerProfilePhotoDeleteResponse:
      type: object
      properties:
        deleted_image_id:
          type: [string, 'null']
        player:
          $ref: '#/components/schemas/PlayerResponse'
      required: [player]
    PlayerProfilePhotoFinalizeRequest:
      allOf:
        - type: object
          properties:
            organization_id: { type: string }
            organization_slug: { type: string }
            image_id: { type: string }
          required: [image_id]
        - anyOf:
            - required: [organization_id]
            - required: [organization_slug]
    PlayerProfilePhotoFinalizeResponse:
      type: object
      properties:
        profile_photo:
          type: object
          properties:
            image_id: { type: string }
            url:
              type: [string, 'null']
              format: uri
            uploaded_at:
              type: [string, 'null']
              format: date-time
            variants:
              type: object
              additionalProperties:
                type: string
          required: [image_id]
        player:
          $ref: '#/components/schemas/PlayerResponse'
      required: [profile_photo, player]
    PlayerListResponse:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerResponse'
        next_cursor:
          type: [string, 'null']
    PlayerCompetitiveProfile:
      type: [object, 'null']
      description: Summary of competitive history used to seed or calibrate ratings.
      properties:
        discipline:
          $ref: '#/components/schemas/MatchSubmit/properties/discipline'
        ranking_points:
          type: [number, 'null']
        ranking_position:
          type: [integer, 'null']
          minimum: 1
        total_matches:
          type: [integer, 'null']
          minimum: 0
        as_of:
          type: [string, 'null']
          format: date-time
        external_rankings:
          type: [array, 'null']
          items:
            $ref: '#/components/schemas/PlayerRankingSnapshot'
    PlayerRankingSnapshot:
      type: object
      required: [source]
      properties:
        source: { type: string }
        discipline:
          type: [string, 'null']
        position:
          type: [integer, 'null']
          minimum: 1
        points:
          type: [number, 'null']
        as_of:
          type: [string, 'null']
          format: date-time
        metadata:
          type: [object, 'null']
          additionalProperties: true
    PlayerAttributes:
      type: [object, 'null']
      description: Biographical and biometric details that influence competition context.
      properties:
        handedness:
          $ref: '#/components/schemas/PlayerHandedness'
          description: Dominant playing hand (e.g. RIGHT, LEFT, AMBIDEXTROUS).
        dominant_side:
          $ref: '#/components/schemas/PlayerDominantSide'
          description: Preferred side or court position for team formats.
        height_cm:
          type: [number, 'null']
        weight_kg:
          type: [number, 'null']
        birth_date:
          type: [string, 'null']
          format: date
        residence:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    PlayerInsightsResponse:
      type: object
      required: [meta, rating_trend, form_summary, discipline_overview, volatility]
      properties:
        meta:
          $ref: '#/components/schemas/PlayerInsightMeta'
        rating_trend:
          $ref: '#/components/schemas/PlayerInsightRatingTrend'
        form_summary:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PlayerInsightFormWindow'
        discipline_overview:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PlayerInsightDiscipline'
        milestones:
          type: [array, 'null']
          items:
            $ref: '#/components/schemas/PlayerInsightMilestone'
        streaks:
          type: [array, 'null']
          items:
            $ref: '#/components/schemas/PlayerInsightStreak'
        volatility:
          $ref: '#/components/schemas/PlayerInsightVolatility'
        cache_keys:
          $ref: '#/components/schemas/PlayerInsightCacheKeys'
        ai:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PlayerInsightAiSummary'
    PlayerInsightMeta:
      type: object
      required: [schema_version, generated_at, player_id]
      properties:
        schema_version: { type: integer, minimum: 1 }
        generated_at: { type: string, format: date-time }
        player_id: { type: string }
        sport:
          type: [string, 'null']
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL, null]
        disciplines:
          type: array
          items:
            type: string
            enum: [SINGLES, DOUBLES, MIXED]
        sample_range:
          type: [object, 'null']
          additionalProperties: false
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
    PlayerInsightRatingTrend:
      type: object
      required: [cadence, points]
      properties:
        cadence:
          type: string
          enum: [DAILY, WEEKLY, MONTHLY]
          default: WEEKLY
        points:
          type: array
          items:
            $ref: '#/components/schemas/PlayerInsightRatingPoint'
        lifetime_high:
          type: [object, 'null']
          additionalProperties: false
          properties:
            mu: { type: number }
            sigma: { type: number }
            occurred_at: { type: string, format: date-time }
        lifetime_low:
          type: [object, 'null']
          additionalProperties: false
          properties:
            mu: { type: number }
            sigma: { type: number }
            occurred_at: { type: string, format: date-time }
        latest_snapshot_id:
          type: [string, 'null']
    PlayerInsightRatingPoint:
      type: object
      required: [period_start, mu, sigma]
      properties:
        period_start: { type: string, format: date-time }
        mu: { type: number }
        sigma: { type: number }
        mu_delta:
          type: [number, 'null']
        sample_count:
          type: [integer, 'null']
          minimum: 0
    PlayerInsightFormWindow:
      type: object
      required: [matches, wins, losses, net_delta]
      properties:
        matches: { type: integer, minimum: 0 }
        wins: { type: integer, minimum: 0 }
        losses: { type: integer, minimum: 0 }
        draws:
          type: [integer, 'null']
          minimum: 0
        net_delta: { type: number }
        avg_delta:
          type: [number, 'null']
        avg_opponent_mu:
          type: [number, 'null']
        rating_events:
          type: [integer, 'null']
          minimum: 0
        last_event_at:
          type: [string, 'null']
          format: date-time
    PlayerInsightDiscipline:
      type: object
      required: [matches_played, wins, net_delta]
      properties:
        sport:
          type: [string, 'null']
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL, null]
        discipline:
          type: [string, 'null']
          enum: [SINGLES, DOUBLES, MIXED, null]
        current_rank:
          type: [integer, 'null']
          minimum: 1
        best_rank:
          type: [integer, 'null']
          minimum: 1
        mu:
          type: [number, 'null']
        sigma:
          type: [number, 'null']
        matches_played: { type: integer, minimum: 0 }
        wins: { type: integer, minimum: 0 }
        losses:
          type: [integer, 'null']
          minimum: 0
        net_delta: { type: number }
        events_played:
          type: [integer, 'null']
          minimum: 0
        last_event_at:
          type: [string, 'null']
          format: date-time
    PlayerInsightMilestone:
      type: object
      required: [type, occurred_at]
      properties:
        type: { type: string }
        occurred_at: { type: string, format: date-time }
        delta:
          type: [number, 'null']
        label:
          type: [string, 'null']
        match_id:
          type: [string, 'null']
        rating_event_id:
          type: [string, 'null']
    PlayerInsightStreak:
      type: object
      required: [type, start_at, end_at]
      properties:
        type:
          type: string
          enum: [WIN_STREAK, LOSS_STREAK, RATING_MOMENTUM, VOLATILITY_SHIFT]
        start_at: { type: string, format: date-time }
        end_at: { type: string, format: date-time }
        matches:
          type: [integer, 'null']
          minimum: 0
        net_delta:
          type: [number, 'null']
    PlayerInsightVolatility:
      type: object
      required: [sigma_now]
      properties:
        sigma_now: { type: number }
        sigma_30d_change:
          type: [number, 'null']
        inactive_streak_days:
          type: [integer, 'null']
          minimum: 0
        volatility_status:
          type: [string, 'null']
          enum: [STABLE, ELEVATED, HIGH, UNKNOWN, null]
    PlayerInsightCacheKeys:
      type: [object, 'null']
      properties:
        etag:
          type: [string, 'null']
        digest:
          type: [string, 'null']
    PlayerInsightAiSummary:
      type: object
      additionalProperties: false
      required: [status, snapshot_digest, prompt_version]
      properties:
        status:
          type: string
          description: Current AI generation status
          enum: [ready, pending, failed, quota_exceeded, disabled]
        snapshot_digest:
          type: string
          description: Digest of the insight snapshot the narrative references
        prompt_version:
          type: string
          description: Prompt template version used for the narrative
        narrative:
          type: [string, 'null']
        model:
          type: [string, 'null']
        generated_at:
          type: [string, 'null']
          format: date-time
        last_requested_at:
          type: [string, 'null']
          format: date-time
        expires_at:
          type: [string, 'null']
          format: date-time
        poll_after_ms:
          type: [integer, 'null']
          minimum: 0
        tokens:
          type: [object, 'null']
          additionalProperties: false
          properties:
            prompt:
              type: integer
              minimum: 0
            completion:
              type: integer
              minimum: 0
            total:
              type: integer
              minimum: 0
        job_id:
          type: [string, 'null']
        error:
          type: [object, 'null']
          additionalProperties: false
          properties:
            code:
              type: string
            message:
              type: [string, 'null']
    MatchSubmit:
      type: object
      required: [sport, discipline, format, start_time, sides, games]
      properties:
        provider_id:
          type: string
          description: >-
            Optional provider override. When omitted the API derives the provider_id from the authenticated subject
            and ignores any supplied value that does not match that subject.
        external_ref:
          type: [string, 'null']
          description: >-
            Provider-specific unique identifier for this match. Used for idempotency -
            submitting the same provider_id + external_ref combination multiple times
            will return the existing match instead of creating duplicates.
        organization_id: { type: string, description: 'UUID of the organization' }
        organization_slug: { type: string, description: 'Slug identifier (alternative to organization_id)' }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline: { type: string, enum: [SINGLES, DOUBLES, MIXED] }
        format:
          $ref: '#/components/schemas/CompetitionFormat'
          example:
            family: BADMINTON
            code: MS
          description: >-
            Structured format descriptor. The family scopes the code namespace (usually aligning to the sport)
            and the code captures the specific draw type (e.g. MS, WD, XD). Ratings remain scoped to sport + discipline.
        event_id:
          type: string
          format: uuid
          description: Optional event identifier that groups the match with a tournament or competition
        competition_id:
          type: string
          format: uuid
          description: Optional competition identifier nested under the parent event
        start_time: { type: string, format: date-time }
        stage:
          $ref: '#/components/schemas/MatchStage'
        timing:
          $ref: '#/components/schemas/MatchTiming'
        venue_region_id: { type: string }
        tier: { type: string, enum: [SANCTIONED, LEAGUE, SOCIAL, EXHIBITION] }
        statistics:
          description: >-
            Experimental: optional performance metrics captured by the submitter. Subject to breaking
            changes while we iterate on structured telemetry support.
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          description: >-
            Experimental: optional timeline markers supplied by the submitter. Subject to breaking
            changes while we iterate on structured telemetry support.
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
        sides:
          type: object
          properties:
            A:
              type: object
              properties:
                players:
                  type: array
                  minItems: 1
                  maxItems: 2
                  items: { type: string }
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/MatchParticipant'
            B:
              type: object
              properties:
                players:
                  type: array
                  minItems: 1
                  maxItems: 2
                  items: { type: string }
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/MatchParticipant'
        games:
          description: >-
            Ordered list of game scores. For badminton you may submit an empty array to capture
            result-only matches, but you must include `winner` when doing so and the match will be
            stored as unrated with a missing-scores reason.
          type: array
          items:
            type: object
            properties:
              game_no: { type: integer }
              a: { type: integer }
              b: { type: integer }
              segments:
                description: >-
                  Experimental: optional timeline markers supplied by the submitter. Subject to breaking
                  changes while we iterate on structured telemetry support.
                type: array
                items:
                  $ref: '#/components/schemas/MatchSegment'
              statistics:
                description: >-
                  Experimental: optional per-game performance metrics. Subject to breaking changes while
                  we iterate on structured telemetry support.
                $ref: '#/components/schemas/MatchStatistics'
        winner:
          type: [string, 'null']
          enum: [A, B, null]
          description: >-
            Optional winner indicator. Submit this when sending badminton matches without game scores so
            the API can persist them as unrated results with a missing-scores reason.
    MatchUpdate:
      type: object
      properties:
        organization_id: { type: string }
        organization_slug: { type: string }
        start_time: { type: string, format: date-time }
        venue_id:
          type: [string, 'null']
        venue_region_id:
          type: [string, 'null']
        event_id:
          type: [string, 'null']
          format: uuid
        competition_id:
          type: [string, 'null']
          format: uuid
        timing:
          $ref: '#/components/schemas/MatchTiming'
        stage:
          $ref: '#/components/schemas/MatchStage'
        statistics:
          description: >-
            Experimental: optional performance metrics captured by the submitter. Subject to breaking
            changes while we iterate on structured telemetry support.
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          description: >-
            Experimental: optional timeline markers supplied by the submitter. Subject to breaking
            changes while we iterate on structured telemetry support.
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
    MatchSubmitResponse:
      type: object
      properties:
        match_id: { type: string }
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        event_id:
          type: [string, 'null']
        competition_id:
          type: [string, 'null']
        rating_status:
          type: string
          enum: [RATED, UNRATED]
          description: Indicates whether the match affected ratings.
        rating_skip_reason:
          type: [string, 'null']
          enum: [MISSING_SCORES, UNKNOWN, null]
          description: Populated when rating_status is UNRATED to explain why no rating delta was applied.
        ratings:
          type: array
          items:
            type: object
            properties:
              player_id: { type: string }
              rating_event_id:
                type: [string, 'null']
                description: Rating history entry applied by this match (may be null if auditing is pending).
              mu_before: { type: number }
              mu_after: { type: number }
              delta: { type: number }
              sigma_after: { type: number }
              win_probability_pre: { type: number }
    MatchListResponse:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/MatchSummary'
        next_cursor:
          type: [string, 'null']
    MatchSportTotal:
      type: object
      required: [sport, total_matches]
      properties:
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        total_matches:
          type: integer
          minimum: 0
    MatchSportTotalsResponse:
      type: object
      required: [organization_id, sport_totals]
      properties:
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        sport_totals:
          type: array
          items:
            $ref: '#/components/schemas/MatchSportTotal'
    PlayerSportTotal:
      type: object
      required: [sport, total_players]
      properties:
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        total_players:
          type: integer
          minimum: 0
    PlayerSportTotalsResponse:
      type: object
      required: [organization_id, sport_totals]
      properties:
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        sport_totals:
          type: array
          items:
            $ref: '#/components/schemas/PlayerSportTotal'
    OrganizationCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        slug:
          type: [string, 'null']
        description:
          type: [string, 'null']
    OrganizationUpdate:
      type: object
      properties:
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
    OrganizationResponse:
      type: object
      properties:
        organization_id: { type: string }
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        created_at:
          type: [string, 'null']
          format: date-time
    OrganizationListResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'
        next_cursor:
          type: [string, 'null']
    MatchSummary:
      type: object
      properties:
        match_id: { type: string }
        provider_id: { type: string }
        external_ref:
          type: [string, 'null']
          description: Provider-specific unique identifier for this match
        organization_id: { type: string }
        organization_slug:
          type: [string, 'null']
        sport: { $ref: '#/components/schemas/MatchSubmit/properties/sport' }
        discipline: { $ref: '#/components/schemas/MatchSubmit/properties/discipline' }
        format:
          $ref: '#/components/schemas/CompetitionFormat'
        tier:
          type: [string, 'null']
        start_time: { type: string, format: date-time }
        venue_id:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        stage:
          $ref: '#/components/schemas/MatchStage'
        event_id:
          type: [string, 'null']
        competition_id:
          type: [string, 'null']
        competition_slug:
          type: [string, 'null']
        timing:
          $ref: '#/components/schemas/MatchTiming'
        statistics:
          description: >-
            Experimental: optional match-wide performance metrics captured by the submitter. Subject to
            breaking changes while we iterate on structured telemetry support.
          $ref: '#/components/schemas/MatchStatistics'
        segments:
          description: >-
            Experimental: optional timeline markers supplied by the submitter. Subject to breaking
            changes while we iterate on structured telemetry support.
          type: array
          items:
            $ref: '#/components/schemas/MatchSegment'
        rating_status:
          type: string
          enum: [RATED, UNRATED]
        rating_skip_reason:
          type: [string, 'null']
          enum: [MISSING_SCORES, UNKNOWN, null]
        winner:
          type: [string, 'null']
          enum: [A, B, null]
        sides:
          type: object
          additionalProperties:
            type: object
            properties:
              players:
                type: array
                items: { type: string }
              participants:
                type: array
                items:
                  $ref: '#/components/schemas/MatchParticipant'
        games:
          type: array
          items:
            type: object
            properties:
              game_no: { type: integer }
              a: { type: integer }
              b: { type: integer }
              segments:
                description: >-
                  Experimental: optional timeline markers supplied by the submitter. Subject to breaking
                  changes while we iterate on structured telemetry support.
                type: array
                items:
                  $ref: '#/components/schemas/MatchSegment'
              statistics:
                description: >-
                  Experimental: optional per-game performance metrics. Subject to breaking changes while
                  we iterate on structured telemetry support.
                $ref: '#/components/schemas/MatchStatistics'
        rating_events:
          type: [array, 'null']
          description: >-
            Included when include=rating_events is provided. Contains the rating deltas generated for
            every player involved in the match.
          items:
            $ref: '#/components/schemas/RatingEvent'
    MatchTiming:
      type: object
      description: Key timestamps and duration information for a match.
      properties:
        scheduled_start:
          type: [string, 'null']
          format: date-time
        actual_start:
          type: [string, 'null']
          format: date-time
        completed_at:
          type: [string, 'null']
          format: date-time
        duration_seconds:
          type: [integer, 'null']
          minimum: 0
        time_zone:
          type: [string, 'null']
          pattern: '^[A-Za-z]+(?:/[A-Za-z_]+)+$'
          description: IANA time zone identifier capturing the competition locale.
        status:
          $ref: '#/components/schemas/MatchStatus'
    MatchSegment:
      type: object
      description: >-
        Experimental: time-ordered scoring or momentum events captured during play. Shape and semantics are
        subject to change while we iterate on structured telemetry support.
      properties:
        sequence:
          type: [integer, 'null']
          minimum: 1
          description: Position of the segment within the match or game.
        phase:
          type: [string, 'null']
          description: Optional phase identifier such as GAME_1, TIEBREAK, or OVERTIME.
        label:
          type: [string, 'null']
        side:
          $ref: '#/components/schemas/MatchSegmentSide'
          description: Identifier of the side credited for the event.
        value:
          type: [number, 'null']
          description: Numeric magnitude for the segment (such as points won).
        unit:
          type: [string, 'null']
        elapsed_seconds:
          type: [number, 'null']
        timestamp:
          type: [string, 'null']
          format: date-time
        metadata:
          type: [object, 'null']
          additionalProperties: true
    MatchParticipant:
      type: object
      required: [player_id]
      properties:
        player_id: { type: string }
        role:
          $ref: '#/components/schemas/MatchParticipantRole'
          description: Competition-specific role or lineup position.
        seed:
          type: [integer, 'null']
          minimum: 1
        status:
          $ref: '#/components/schemas/MatchParticipantStatus'
          description: Participation status such as ACTIVE or WITHDRAWN.
        external_ref:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    MatchStatistics:
      description: >-
        Experimental: collection of key-value metrics summarizing performance. Shape and semantics are
        subject to change while we iterate on structured telemetry support.
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/MatchMetric'
        - $ref: '#/components/schemas/LooseMatchStatistics'
    MatchMetric:
      type: object
      required: [value]
      properties:
        value:
          type: number
        unit:
          type: [string, 'null']
        breakdown:
          type: [object, 'null']
          additionalProperties:
            type: number
        source:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
      description: A single statistic value with optional contextual details.
    LooseMatchStatistics:
      type: object
      description: Legacy nested statistic maps. The API flattens and coerces numeric values into MatchMetric entries automatically.
      additionalProperties:
        oneOf:
          - type: number
          - type: string
          - type: 'null'
          - $ref: '#/components/schemas/MatchMetric'
          - $ref: '#/components/schemas/LooseMatchStatistics'
    Event:
      type: object
      properties:
        event_id: { type: string }
        organization_id: { type: string }
        organization_slug: { type: string }
        provider_id: { type: [string, 'null'] }
        external_ref: { type: [string, 'null'] }
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
        competitions:
          type: array
          description: Nested competitions that belong to this event.
          items:
            $ref: '#/components/schemas/Competition'
        created_at:
          type: [string, 'null']
          format: date-time
        updated_at:
          type: [string, 'null']
          format: date-time
    EventCreate:
      type: object
      required: [type, name]
      properties:
        organization_id: { type: string, format: uuid }
        organization_slug: { type: string }
        provider_id:
          type: string
          description: >-
            Optional provider override. When omitted the API derives the provider_id from the authenticated subject
            and ignores any supplied value that does not match that subject.
        external_ref: { type: string }
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    EventUpdate:
      type: object
      properties:
        type:
          type: string
          enum: [TOURNAMENT, LEAGUE, LADDER, BOX_LEAGUE, CHAMPIONSHIP, SERIES, EXHIBITION, CUSTOM]
        name: { type: string }
        slug: { type: string }
        description:
          type: [string, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        sanctioning_body:
          type: [string, 'null']
        season:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    Competition:
      type: object
      properties:
        competition_id: { type: string }
        event_id: { type: string }
        event_slug: { type: string }
        organization_id: { type: string }
        provider_id: { type: [string, 'null'] }
        external_ref: { type: [string, 'null'] }
        name: { type: string }
        slug: { type: string }
        sport:
          type: [string, 'null']
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: [string, 'null']
          enum: [SINGLES, DOUBLES, MIXED]
        format:
          $ref: '#/components/schemas/CompetitionFormat'
        tier:
          type: [string, 'null']
        draw_size:
          type: [integer, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
        created_at:
          type: [string, 'null']
          format: date-time
        updated_at:
          type: [string, 'null']
          format: date-time
    CompetitionCreate:
      type: object
      required: [name]
      properties:
        provider_id:
          type: string
          description: >-
            Optional provider override. When omitted the API derives the provider_id from the authenticated subject
            and ignores any supplied value that does not match that subject.
        external_ref: { type: string }
        name: { type: string }
        slug: { type: string }
        sport:
          type: [string, 'null']
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: [string, 'null']
          enum: [SINGLES, DOUBLES, MIXED]
        format:
          $ref: '#/components/schemas/CompetitionFormat'
        tier:
          type: [string, 'null']
        draw_size:
          type: [integer, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
    CompetitionUpdate:
      type: object
      properties:
        name: { type: string }
        slug: { type: string }
        sport:
          type: [string, 'null']
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: [string, 'null']
          enum: [SINGLES, DOUBLES, MIXED]
        format:
          $ref: '#/components/schemas/CompetitionFormat'
        tier:
          type: [string, 'null']
        draw_size:
          type: [integer, 'null']
        start_date:
          type: [string, 'null']
          format: date-time
        end_date:
          type: [string, 'null']
          format: date-time
        classification:
          $ref: '#/components/schemas/EventClassification'
        purse:
          type: [number, 'null']
        purse_currency:
          type: [string, 'null']
        media_links:
          $ref: '#/components/schemas/EventMediaLinks'
        metadata:
          type: [object, 'null']
          additionalProperties: true
    CompetitionListResponse:
      type: object
      properties:
        competitions:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
    CompetitionParticipant:
      type: object
      properties:
        competition_id: { type: string }
        player_id: { type: string }
        seed:
          type: [integer, 'null']
        status:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
        created_at:
          type: [string, 'null']
          format: date-time
        updated_at:
          type: [string, 'null']
          format: date-time
    CompetitionParticipantRequest:
      type: object
      required: [player_id]
      properties:
        player_id: { type: string }
        seed:
          type: [integer, 'null']
        status:
          type: [string, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    CompetitionParticipantListResponse:
      type: object
      properties:
        competition:
          $ref: '#/components/schemas/Competition'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionParticipant'
    EventClassification:
      type: object
      description: Structured hierarchy data describing the competitive level of an event.
      properties:
        level:
          $ref: '#/components/schemas/EventLevel'
          description: High-level tour or competition grade (e.g. WORLD_TOUR, NATIONAL, CLUB).
        grade:
          $ref: '#/components/schemas/EventGrade'
          description: Fine-grained grade keyed by governing family (e.g. family BWF + code SUPER_750).
        age_group:
          $ref: '#/components/schemas/EventAgeGroup'
          description: Target age bracket if applicable (e.g. U19, SENIOR).
        tour:
          type: [string, 'null']
          description: Named series or tour identifier.
        category:
          type: [string, 'null']
          description: Discipline-specific category, draw, or bracket label.
    CompetitionFormat:
      type: [object, 'null']
      description: Structured format descriptor aligning draw codes with the taxonomy that defines them.
      required: [family, code]
      properties:
        family:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL, OTHER]
          description: Sport or taxonomy namespace that scopes the format code.
        code:
          type: string
          description: Format identifier scoped to the family (e.g. MS, WD, BO5).
        name:
          type: [string, 'null']
          description: Optional display label for UI contexts.
    EventMediaLinks:
      type: object
      description: Links to event resources across digital channels.
      properties:
        website:
          type: [string, 'null']
          format: uri
        registration:
          type: [string, 'null']
          format: uri
        live_scoring:
          type: [string, 'null']
          format: uri
        streaming:
          type: [string, 'null']
          format: uri
        social:
          type: [object, 'null']
          additionalProperties: { type: string, format: uri }
    EventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        next_cursor:
          type: [string, 'null']
    MatchStatus:
      type: string
      description: Lifecycle status for a match.
      enum: [SCHEDULED, IN_PROGRESS, COMPLETED, RETIRED, WALKOVER, CANCELLED]
    MatchSegmentSide:
      type: string
      description: Identifier for the match side credited in a segment.
      enum: [A, B, HOME, AWAY]
    MatchStage:
      type: [object, 'null']
      description: Structured indicator of a match's bracket position when applicable.
      required: [type]
      properties:
        type:
          type: string
          enum: [ROUND_OF, GROUP, QUARTERFINAL, SEMIFINAL, FINAL, PLAYOFF, OTHER]
          description: Stage archetype for filtering and grouping.
        value:
          type: [integer, 'null']
          minimum: 1
          description: Numeric qualifier such as the "16" in ROUND_OF_16.
        label:
          type: [string, 'null']
          description: Optional human-friendly stage label (e.g. "Pool B Match 2").
    MatchParticipantRole:
      type: string
      description: Role designation for a participant.
      enum: [STARTER, SUBSTITUTE, RESERVE, LEAD, OTHER]
    MatchParticipantStatus:
      type: string
      description: Roster status indicator for a participant.
      enum: [ACTIVE, STARTER, BENCH, WITHDRAWN, INACTIVE, OTHER]
    PlayerHandedness:
      type: string
      description: Dominant playing hand.
      enum: [LEFT, RIGHT, AMBIDEXTROUS, OTHER]
    PlayerDominantSide:
      type: string
      description: Preferred side or court position.
      enum: [DEUCE, AD, LEFT, RIGHT, BOTH, OTHER]
    EventLevel:
      type: [string, 'null']
      description: Top-level classification tier for an event.
      enum: [WORLD_TOUR, CONTINENTAL, NATIONAL, REGIONAL, CLUB, SCHOOL, COMMUNITY, OTHER, null]
    EventGrade:
      type: [object, 'null']
      description: Grade within a level, scoped to a governing family for cross-sport interoperability.
      required: [family, code]
      properties:
        family:
          type: string
          enum: [BWF, ATP, WTA, ITF, PSA, PICKLEBALL_TOUR, NATIONAL_FEDERATION, OTHER]
          description: Governing family responsible for the grade taxonomy.
        code:
          type: string
          description: Grade identifier defined by the family (e.g. SUPER_750, ATP_250).
        name:
          type: [string, 'null']
          description: Optional display label when the governing body uses a non-code brand name.
    EventAgeGroup:
      type: [string, 'null']
      description: Target age bracket for participants.
      enum: [U11, U13, U15, U17, U19, U21, SENIOR, ADULT, VETERAN, MASTER, OPEN, OTHER, null]
    RatingEvent:
      type: object
      properties:
        rating_event_id: { type: string }
        organization_id: { type: string }
        player_id: { type: string }
        match_id:
          type: [string, 'null']
        applied_at: { type: string, format: date-time }
        rating_system:
          type: [string, 'null']
        mu_before: { type: number }
        mu_after: { type: number }
        delta: { type: number }
        sigma_before:
          type: [number, 'null']
        sigma_after: { type: number }
        win_probability_pre:
          type: [number, 'null']
        metadata:
          type: [object, 'null']
          additionalProperties: true
    RatingEventListResponse:
      type: object
      properties:
        rating_events:
          type: array
          items:
            $ref: '#/components/schemas/RatingEvent'
        next_cursor:
          type: [string, 'null']
    RatingSnapshotResponse:
      type: object
      required: [player_id, sport, discipline, as_of, mu, sigma]
      properties:
        player_id: { type: string }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        scope:
          type: [string, 'null']
        organization_id:
          type: [string, 'null']
        as_of: { type: string, format: date-time }
        mu: { type: number }
        sigma: { type: number }
        rating_event:
          anyOf:
            - $ref: '#/components/schemas/RatingEvent'
            - type: 'null'
          description: 'Latest rating event applied at or before the snapshot time'
    LeaderboardPlayer:
      type: object
      properties:
        rank: { type: integer }
        player_id: { type: string }
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        mu: { type: number }
        sigma: { type: number }
        matches: { type: integer }
        delta:
          type: [number, 'null']
        last_event_at:
          type: [string, 'null']
          format: date-time
        last_match_id:
          type: [string, 'null']
    LeaderboardResponse:
      type: object
      properties:
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        scope:
          type: [string, 'null']
        organization_id:
          type: [string, 'null']
        total_players:
          type: integer
          minimum: 0
        page_size:
          type: integer
          minimum: 1
        total_pages:
          type: integer
          minimum: 0
        has_more:
          type: boolean
        players:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardPlayer'
        next_cursor:
          type: [string, 'null']
    LeaderboardMover:
      type: object
      properties:
        player_id: { type: string }
        display_name: { type: string }
        short_name:
          type: [string, 'null']
        given_name:
          type: [string, 'null']
        family_name:
          type: [string, 'null']
        country_code:
          type: [string, 'null']
        region_id:
          type: [string, 'null']
        mu: { type: number }
        sigma: { type: number }
        matches: { type: integer }
        change: { type: number }
        events: { type: integer }
        last_event_at:
          type: [string, 'null']
          format: date-time
    LeaderboardMoversResponse:
      type: object
      properties:
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        scope:
          type: [string, 'null']
        organization_id:
          type: [string, 'null']
        since: { type: string, format: date-time }
        players:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardMover'
    RatingSummaryResponse:
      type: object
      required: [player_id, sport, discipline, mu, sigma]
      properties:
        player_id: { type: string }
        sport:
          type: string
          enum: [BADMINTON, TENNIS, SQUASH, PADEL, PICKLEBALL]
        discipline:
          type: string
          enum: [SINGLES, DOUBLES, MIXED]
        scope:
          type: [string, 'null']
        organization_id:
          type: [string, 'null']
        mu: { type: number }
        sigma: { type: number }
        matches: { type: integer }
